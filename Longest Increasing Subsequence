
https://practice.geeksforgeeks.org/problems/longest-increasing-subsequence-1587115620/1

// int helper(int ind, int prev, int arr[], int n, vector<vector<int>> &dp)
// {

// 	if (ind == n)
// 	{
// 		return 0;
// 	}
 
// 	if (dp[ind][prev + 1] != -1)
// 	{
// 		return dp[ind][prev + 1];
// 	}
	
//  int len = helper(ind + 1, prev, arr, n, dp);
// 	if (prev==-1 || arr[ind] > arr[prev])
// 	{
// 		len =max(len, 1 + helper(ind + 1, ind, arr, n, dp));
// 	}
// 	// exclude
// 	return dp[ind][prev + 1] = len;
// }
int longestSubsequence(int n, int arr[])
{
   vector<int> dp(n,1) , hash(n);
   for(int i=0;i<n;i++){
        hash[i]=i;
   }
   int maxi=0;
   int lastindex=0;
   for(int i=0;i<n;i++){
       for(int j=0;j<i;j++){
            if(arr[j]<arr[i]){
               if((dp[j]+1)>dp[i]){
                    dp[i]=dp[j]+1;
                    hash[i]=j;
               }
            }
       }
       if(dp[i]>dp[maxi]){
            maxi=i;
            lastindex=i;
       }
   }
   return dp[maxi];
 }

 
