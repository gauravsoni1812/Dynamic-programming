 https://practice.geeksforgeeks.org/problems/longest-bitonic-subsequence0824/1
int LongestBitonicSequence(vector<int> arr) {
    int n = arr.size();
    vector<int> dp(n, 1);
    vector<int> np(n, 1);

    // Computing the longest increasing subsequence (LIS) from left to right
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (arr[j] < arr[i] && dp[j] + 1 > dp[i]) {
                dp[i] = dp[j] + 1;
            }
        }
    }

    // Computing the longest increasing subsequence (LIS) from right to left
    reverse(arr.begin(), arr.end());
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (arr[j] < arr[i] && np[j] + 1 > np[i]) {
                np[i] = np[j] + 1; // Fix: Update np[i] instead of dp[i]
            }
        }
    }

    int ans = 0;
    for (int i = 0; i < n; i++) {
        ans = max(ans, dp[i] + np[n - 1 - i] - 1); // Using np[n - 1 - i] for the reversed sequence
    }

    return ans;
}
