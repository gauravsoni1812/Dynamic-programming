https://practice.geeksforgeeks.org/problems/buy-and-sell-a-share-at-most-twice/1
 
 
 MY code 1121 out 1122 passed memoization
// int helper(int ind, vector<int> &prices, int buy, vector<vector<vector<int>>> &dp, int cap)
// {
//     if (cap == 0)
//     {
//         return 0;
//     }
//     if (ind == prices.size())
//     {
//         return 0;
//     }
//     if (dp[ind][buy][cap] != -1)
//     {
//         return dp[ind][buy][cap];
//     }
//     int profit;
//     if (buy == 1)
//     {
//         profit = max((-prices[ind] + helper(ind + 1, prices, 0, dp, cap)), (helper(ind + 1, prices, 1, dp, cap)));
//     }
//     else
//     {
//         profit = max(prices[ind] + helper(ind + 1, prices, 1, dp, cap - 1), helper(ind + 1, prices, 0, dp, cap));
//     }
//     return dp[ind][buy][cap] = profit;
// }
TAblulation wrong ans
// int maxProfit(vector<int> &prices)
// {
//     int n = prices.size();
//     vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(2, vector<int>(3, -1)));
//     for (int ind = n - 1; ind >= 0; ind--)
//     {
//         for (int buy = 0; buy <= 1; buy++)
//         {
//             for (int cap = 1; cap <= 2; cap++)
//             {
//                 if (buy == 1)
//                 {
//                     dp[ind][buy][cap] = max(-prices[ind] + dp[ind + 1][0][cap], dp[ind + 1][1][cap]);
//                 }
//                 else
//                 {
//                     dp[ind][buy][cap] = max(prices[ind] + dp[ind + 1][1][cap - 1], dp[ind + 1][0][cap]);
//                 }
//             }
//         }
//     }
//     return dp[0][1][2];
// }

 // memoization worked  
int func(int ind,int buy,vector<int>&prices,vector<vector<vector<int>>> &dp,int n,int l){
    if(l==0){
        return 0;
    }
        if(ind==n){
            return 0;
        }
        if(dp[ind][buy][l]!=-1) return dp[ind][buy][l];
        if(buy){
            return dp[ind][buy][l]= max(-prices[ind]+func(ind+1,0,prices,dp,n,l),
             func(ind+1,1,prices,dp,n,l));
        }
        else{
            return dp[ind][buy][l] = max(prices[ind]+func(ind+1,1,prices,dp,n,l-1),func(ind+1,0,prices,dp,n,l));
        }
    }
     
int maxProfit(vector<int>&price){
    //Write your code here..
    int n=price.size();
    vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
    int l=2;
     return func(0,1,price,dp,n,l);
    
}

Tabulation worked
int maxProfit(vector<int>&price){    // TC & SC  = 0( N*2*3)
           int n = price.size();
          vector<vector<vector<int>>>dp( n+1, vector<vector<int>>( 2 , vector<int>( 3,0)));

          for( int i = n-1 ; i>=0 ; i--){
               for( int buy = 0 ; buy<=1;buy++){
                    for( int cap =1 ; cap<=2;cap++){
                         if( buy==1){
                              dp[i][buy][cap]= max( -price[i]+ dp[i+1][0][cap] , 0 + dp[i+1][1][cap]);

                         }else{
                               dp[i][buy][cap]= max( price[i]+ dp[i+1][1][cap-1] , 0 + dp[i+1][0][cap]);

                         }
                    }
               }
          }
          return  dp[0][1][2];
}
