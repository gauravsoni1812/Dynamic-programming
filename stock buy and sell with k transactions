https://practice.geeksforgeeks.org/problems/maximum-profit4657/1

// int dp[501][201][2];
//     int helper(int k,int n,int a[],int index,bool buy){
//         if(k==0)return 0;
//         if(dp[index][k][buy]!=-1)return dp[index][k][buy];
//         if(index==n)return 0;
//         if(buy){
//             int l=helper(k,n,a,index+1,false)-a[index];
//             int b=helper(k,n,a,index+1,true);
//             return dp[index][k][buy]=max(l,b);
//         }
//         else{
//             int l=helper(k-1,n,a,index+1,true)+a[index];
//             int b=helper(k,n,a,index+1,false);
//             return dp[index][k][buy]=max(l,b);
//         }
//     }
//     int maxProfit(int K, int N, int A[]) {
//         memset(dp,-1,sizeof(dp));
//         return max(helper(K,N,A,0,true),helper(K,N,A,0,true));
//     }
//   int n = price.size();
//           vector<vector<vector<int>>>dp( n+1, vector<vector<int>>( 2 , vector<int>( ,0)));

//           for( int i = n-1 ; i>=0 ; i--){
//               for( int buy = 0 ; buy<=1;buy++){
//                     for( int cap =1 ; cap<=2;cap++){
//                          if( buy==1){
//                               dp[i][buy][cap]= max( -price[i]+ dp[i+1][0][cap] , 0 + dp[i+1][1][cap]);

//                          }else{
//                               dp[i][buy][cap]= max( price[i]+ dp[i+1][1][cap-1] , 0 + dp[i+1][0][cap]);

//                          }
//                     }
//               }
//           }
//           return  dp[0][1][2];
