

int countPartitions(int n, int target, vector<int> &nums)
{
	int sum = 0;
	int mod = 1e9 + 7;
	for (auto i : nums)
	{
		sum += i;
	}
	target = abs(target);
	if (target > sum || (sum + target) % 2 != 0)
	{
		return 0;
	}

	int newtarget = (sum + target) / 2;
	vector<vector<int>> dp(n + 1, vector<int>(newtarget + 1));
	for (int i = 0; i <= n; ++i)
	{
		for (int j = 0; j <= newtarget; ++j)
		{
			if (i == 0)
			{
				dp[i][j] == 0;
			}

			else if (j == 0)
			{
				dp[i][j] == 1;
			}
		}
	}

	dp[0][0] = 1;

	for (int i = 1; i <= n; ++i)
	{
		for (int j = 0; j <= newtarget; ++j)
		{
			if (nums[i - 1] <= j)
			{
				dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - nums[i - 1]]) % mod;
			}
			else
			{
				dp[i][j] = dp[i - 1][j];
			}
		}
	}

	return dp[n][newtarget] % mod;
}
